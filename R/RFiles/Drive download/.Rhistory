install.packages("g.data")
install.packages(xlsx)
"xlsx"
install.packages("xlsx")
install.packages("g.data")
install.packages("g.data")
install.packages(rtools)
install.packages("g.data")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
Sys.which("make")
Sys.which("make")
install.packages("g.data")
install.packages("xlsx")
My_funcion<- function(){}
prin
My_funcion<- function(){}
My_funcion<- function(){print("hello world")}
My_funcion()
My_funcion<- function(number){print(number)}
My_funcion(1:10)
My_funcion<- function(number<-1:5){print(number)}
My_funcion<- function(number <- 1:5){print(number)}
My_funcion<- function(number <- c(1:5)){print(number)}
My_funcion<- function(number = c(1:5)){print(number)}
My_funcion<- function(number = 1:5){print(number)}
My_funcion()
My_funcion(1:10)
My_funcion<- function(number){print(number)}
fn<-My_funcion()
fn<-My_funcion(5)
fn(10)
fn = My_funcion()
My_funcion<- function(number){return(number)}
fn = My_funcion()
fn = My_funcion(8)
fn
fn(10)
Outer_func <- function(x) {
Inner_func <- function(y) {
a <- x + y
return(a)
}
return (Inner_func)
}
output <- Outer_func(3) # To call the Outer_func
output(5)
output(10)
print(c(1:2,.1))
print(c(1:2,.1,.1))
setwd("D:/DS/R/RFiles/Drive download")
#Importing the dataset
dataset<-read.csv('Demo 1_Perform simple linear regression.csv')
dataset = dataset[,4:5]
names(dataset)
View(dataset)
set.seed(123)
split <- sample.split(dataset$Weight,SplitRatio = 0.7)
training_set = subset(dataset,split==TRUE)
mydata<- read.csv('edu_logis.csv')
str(mydata)
mydata<- read.csv('edu_logis.csv')
#Importing the dataset
dataset<-read.csv('Demo 1_Perform simple linear regression.csv')
dataset = dataset[,4:5]
names(dataset)
#Splitting the dataset
#install.packages('caTools')
library(caTools)
set.seed(123)
split <- sample.split(dataset$Weight,SplitRatio = 0.7)
training_set = subset(dataset,split==TRUE)
test_set = subset(dataset,split==FALSE)
Classifier = lm(formula = Weight~Height,
data=training_set)
#implies weight is proportional to height
Classifier                               #We build the model with the training set
y_est <- predict(Classifier,newdata = test_set )
y_est
library(ggplot2)   #To plot with ggplot2 package we start with ggplot() and we start building the plot step by step
ggplot()+
geom_point(aes(x=training_set$Height,y=training_set$Weight),
colour='red')+
geom_line(aes(x=training_set$Height,y=predict(Classifier,newdata = training_set )),
colour = 'blue')+
ggtitle('Weight vs Height (Training Set)')+
xlab('Height')+
ylab('Weight')
